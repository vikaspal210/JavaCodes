// Java Program for union-find algorithm to detect cycle in a graph 
import java.util.*; 
import java.lang.*; 
import java.io.*; 

public class Graph {
    int V,E;
    Edge[] edge;
    
    //inner Edge class
    public class Edge { 
        int src, dest; 
    };
    
    //constructor
    Graph(int v,int e){
        V=v;
        E=e;
        edge=new Edge[E];
        
        for (int i=0; i<e; ++i){ 
            edge[i] = new Edge();
        }
    }
    
    //utility function find() to find subset of an element i
    int find(int[] parent,int i){
       if(parent[i]==-1)
       return i;
       return find(parent, parent[i]);
    }
    
    //utility function Union() to union of to subsets
    void Union(int[] parent,int x, int y){
        int xset=find(parent, x);
        int yset=find(parent,y);
        parent[xset]=yset;
    }
    
    //isCycle() method to check is there a cycle in given ggraph...
    int isCycle(Graph graph){
        //allocate memory for creating V subsets
        int parent[]=new int[graph.V];
        
        //initialize all subsets as single element set
        for(int i=0;i<graph.V;++i)
        parent[i]=-1;
        
        for (int i = 0; i < graph.E; ++i) 
        { 
            int x = graph.find(parent, graph.edge[i].src); 
            int y = graph.find(parent, graph.edge[i].dest); 
  
            if (x == y) 
                return 1; 
  
            graph.Union(parent, x, y); 
        } 
        return 0;
    }
    
    //main method
    public static void main(String[] args){
        /* Let us create following graph 
         0 
        |  \ 
        |    \ 
        1-----2 */
        /*
             4
             /
             /
        0    3
        /    /
        /    /
        1----2  */
        int V=5,E=4;
        Graph graph=new Graph(V,E);
        
        graph.edge[0].src=0;
        graph.edge[0].dest=1;
        
        graph.edge[1].src=1;
        graph.edge[1].dest=2;
        
        graph.edge[2].src=2;
        graph.edge[2].dest=3;
        
        graph.edge[3].src=3;
        graph.edge[3].dest=4;
        
        if (graph.isCycle(graph)==1) 
            System.out.println( "graph contains cycle" ); 
        else
            System.out.println( "graph doesn't contain cycle" );

    }

}